# -*- coding: utf-8 -*-
"""boids_simulation_2023.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D2j8hCZMrUK-1HNY5oazMXkK61f0VRtZ

# Имитационная модель Boids
Многоагентная система с локальными взаимодействиями

### Условие задачи


**Дано:**

- симуляционная модель [**boids**](https://www.red3d.com/cwr/boids/)
    - состоит из набора агентов
    - агенты взаимодействуют только с локальными соседями (в радиусе видимости)
    - три типа взаимодействия между агентами:
        - **alignment** (выравнивание вектора скорости по локальным соседям)
        - **cohesion** (стремление в геометрический центр локальных соседей)
        - **separaion** (избегание локального перенаселения)
    - взаимодействие агентов с границами (**walls**)
    - шум, символизирующий множество неучтенных факторов (**noise**)
    - величина итогового взаимодействия получается смешиванием всех взаимодействий с весами $a, c, s, w, n$
- модули `vispy`, `numpy`, `numba`


**Требуется:**

1. реализовать алгоритм модели **boids** с модификацией, согласно варианту (условие варианта см. ниже)
2. применить компиляцию `@njit` из модуля `numba` с использованием распараллеливания
3. используя модуль `vispy` создать окно и реализовать визуализацию модели
    - также выводить в окне текст:
        - количество агентов
        - значения параметров взаимодействий (для всех классов агентов)
        - частоту кадров (fps)
4. подобрать один набор параметров взаимодействий так, чтобы поведение агентов было не тривиальным, т.е. можно было распознать все типы взаимодействий;
5. создать видеоролики, демонстрирующие эволюцию системы (например, при момощи помощи `ffmpeg-python`):
    - количество агентов $N_i = 1000, 5000$
    - от 1800 до 3600 временных шагов (кадров)
    - длительностью 30 с - 1 мин
    - частота кадров - 60 к/с
6. задокументировать все функции


**Варианты:**

1. реализовать 2 класса агентов:

    - чтобы взаимодействия между агентами:
        - классов `1-1` и `2-2` были согласно параметрам $a_{ii}, c_{ii}, s_{ii}, w_{ii}, n_{ii}$
        - классов `1-2` и `2-1` были согласно параметрам $a_{ij}, c_{ij}, s_{ij}, w_{ij}, n_{ij}$
    - визуализировать классы агентов разными цветами

2. реализовать 2 класса агентов:
   
    - чтобы взаимодействия между агентами:
        - классов `1-1` были согласно параметрам $a_{11}, c_{11}, s_{11}, w_{11}, n_{11}$
        - классов `2-2` были согласно параметрам $a_{22}, c_{22}, s_{22}, w_{22}, n_{22}$
        - классов `1-2` и `2-1` были согласно параметрам $a_{ij}, c_{ij}, s_{ij}, w_{ij}, n_{ij}$
    - визуализировать классы агентов разными цветами

  
3. добавить препятствия:
   
    - неподвижные, круглой формы, радиусы различные, отталкивают агентов,
    - визуализировать препятствия окружностями


4. внести изменения в функции расчета взаимодействий таким образом, чтобы:
   
   - форма области, в которой агент видит соседей, была сектором заданного угла (90-270 градусов),
   - ось сектора ориентирована вдоль вектора скорости,
   - для одного агента визуализировать область видимости и попавших в нее агентов другим цветом


5. внести изменения в функции расчета взаимодействий таким образом, чтобы:
   
   - для расчета взаимодействий использовалось не более заданного количества соседей,
   - для одного агента визуализировать попавших в область видимости агентов одним цветом, а используемых для расчета взаимодействий - другим


**Материалы:**

- [boids](https://www.red3d.com/cwr/boids/)
- [Coding Challenge #124: Flocking Simulation](https://www.youtube.com/watch?v=mhjuuHl6qHM&t=1s)
- [FFMPEG](https://ffmpeg.org/)
- [ffmpeg-python](https://pypi.org/project/ffmpeg-python/)


**Рекомендации:**

- в качестве бекэнда для `vispy` использовать:
    - модуль `pyglet` для `Windows`
    - модуль `pyqt5` / `pyqt6` для `macOS`


**Правила оценивания:**

- оценка за корректно выполненный расчет для каждого значения $N_i$, баллов из 100:
```
    Ni    =  1000, 5000
    g(Ni) =  50,   50
```
    
- штрафы $p(i)$, баллов:
    - нет видеороликов - 50
    - не выполнена модификация - 50
    - на видео нет текста (количество агентов, ...) - 20
    - нет документации функций - 20
    - менее значимые недоработки штрафуются индивидуально


- итоговая оценка за задание = $\max \left( 0, \sum_{i=1}^{2}{g(N_i)} - \sum_{i}{p(i)} \right)$
"""

